nextflow_pipeline {

    options "-stub-run"

    name "Test nf-pediatric profile tracking"
    script "../main.nf"

    test("Tracking profile - should run successfully") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking.csv"
                params.outdir = "$outputDir"

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

                params.tracking = true

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name
                ).match()
            }
        }
    }

    test("Tracking profile no dwi preprocessing - should run successfully") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_norev.csv"
                params.outdir = "$outputDir"

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

                params.tracking = true
                params.skip_dwi_preprocessing = true

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name
                ).match()
            }
        }
    }

    test("Tracking profile no rev b0 - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_norev.csv"
                params.outdir = "$outputDir"

                params.tracking = true

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide a reverse phase encoded B0 image for sample: sub-test")
        }
    }

    test("Tracking profile no dti shells - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_norev.csv"
                params.outdir = "$outputDir"

                params.tracking = true

                params.fodf_shells = "0 1000"

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide the DTI shells using --dti_shells parameter")
        }
    }

    test("Tracking profile no fodf shells - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_norev.csv"
                params.outdir = "$outputDir"

                params.tracking = true

                params.dti_shells = "0 1000"

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide the FODF shells using --fodf_shells parameter")
        }
    }

    test("Tracking profile no dwi - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_nodwi.csv"
                params.outdir = "$outputDir"

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

                params.tracking = true

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide a DWI image for sample: sub-test")
        }
    }

    test("Tracking profile with infant data only T2 - should run successfully") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_infant.csv"
                params.outdir = "$outputDir"

                params.tracking = true
                params.infant = true
                params.fs_license = "https://www.dropbox.com/scl/fi/0s8lp6lydyd0rxawxb4jm/license.txt?rlkey=hz54oc0d4sor69avqphtrjvgn&st=9e0yij97&dl=0"

                // ** Infant specific parameters ** //
                params.dwi_run_synthstrip               = true
                params.dwi_normalize_fa_mask_threshold  = 0.10
                params.fodf_max_fa_threshold            = 0.01
                params.fodf_min_md_threshold            = 0.00185
                params.frf_manual_frf                   = "12,5,5"
                params.run_pft_tracking                 = false
                params.local_min_len                    = 15
                params.local_fa_seeding_mask_threshold  = 0.10
                params.run_local_tracking               = true

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name
                ).match()
            }
        }
    }

    test("Tracking profile with infant data T2 and T1 - should run successfully") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_infant.csv"
                params.outdir = "$outputDir"

                params.tracking = true
                params.infant = true
                params.fs_license = "https://www.dropbox.com/scl/fi/0s8lp6lydyd0rxawxb4jm/license.txt?rlkey=hz54oc0d4sor69avqphtrjvgn&st=9e0yij97&dl=0"

                // ** Infant specific parameters ** //
                params.dwi_run_synthstrip               = true
                params.dwi_normalize_fa_mask_threshold  = 0.10
                params.fodf_max_fa_threshold            = 0.01
                params.fodf_min_md_threshold            = 0.00185
                params.frf_manual_frf                   = "12,5,5"
                params.run_pft_tracking                 = false
                params.local_min_len                    = 15
                params.local_fa_seeding_mask_threshold  = 0.10
                params.run_local_tracking               = true

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name
                ).match()
            }
        }
    }

    test("Tracking profile with infant data no rev b0 - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_infant_norev.csv"
                params.outdir = "$outputDir"

                params.tracking = true
                params.infant = true

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

                // ** Infant specific parameters ** //
                params.dwi_run_synthstrip               = true
                params.dwi_normalize_fa_mask_threshold  = 0.10
                params.fodf_max_fa_threshold            = 0.01
                params.fodf_min_md_threshold            = 0.00185
                params.frf_manual_frf                   = "12,5,5"
                params.run_pft_tracking                 = false
                params.local_min_len                    = 15
                params.local_fa_seeding_mask_threshold  = 0.10

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide a reverse phase encoded B0 image for sample: sub-test")
        }
    }

    test("Tracking profile with infant data no t2 - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking_infant_not2.csv"
                params.outdir = "$outputDir"

                params.tracking = true
                params.infant = true

                params.dti_shells = "0 1000"
                params.fodf_shells = "0 1000"

                // ** Infant specific parameters ** //
                params.dwi_run_synthstrip               = true
                params.dwi_normalize_fa_mask_threshold  = 0.10
                params.fodf_max_fa_threshold            = 0.01
                params.fodf_min_md_threshold            = 0.00185
                params.frf_manual_frf                   = "12,5,5"
                params.run_pft_tracking                 = false
                params.local_min_len                    = 15
                params.local_fa_seeding_mask_threshold  = 0.10

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please provide at least one anatomical image (T1w or T2w) for sample: sub-test")
        }
    }
}
