nextflow_pipeline {

    options "-stub-run"

    name "Test nf-pediatric profile freesurfer"
    script "../main.nf"

    test("Freesurfer profile - freesurfer - should run successfully") {

        when {
            params {

                input = "$projectDir/tests/data/samplesheet_testtracking.csv"
                outdir = "$outputDir"

                use_fastsurfer = false
                freesurfer = true
                fs_license = "https://www.dropbox.com/scl/fi/0s8lp6lydyd0rxawxb4jm/license.txt?rlkey=hz54oc0d4sor69avqphtrjvgn&st=9e0yij97&dl=0"

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            // All freesurfer output.
            def freesurfer_output = getAllFilesFromDir("$outputDir/../freesurfer-7.4.1/", relative: true, includeDir: true)
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name,
                    // All freesurfer output.
                    freesurfer_output
                ).match()
            }
        }
    }

    test("Freesurfer profile - fastsurfer - should run successfully") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking.csv"
                params.outdir = "$outputDir"

                params.freesurfer = true
                params.use_fastsurfer = true
                params.fs_license = "https://www.dropbox.com/scl/fi/0s8lp6lydyd0rxawxb4jm/license.txt?rlkey=hz54oc0d4sor69avqphtrjvgn&st=9e0yij97&dl=0"

            }
        }

        then {
            // stable name: All files + folders in ${params.outdir}/ with a stable name.
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore:  ['pipeline_info/*.{html,json,txt}'])
            // All fastsurfer output.
            def fastsurfer_output = getAllFilesFromDir("$outputDir/../fastsurfer-v2.3.3/", relative: true, includeDir: true)
            assertAll {
                assert workflow.success
                assert snapshot(
                    // Number of successfully completed tasks
                    workflow.trace.succeeded().size(),
                    // Remove the nextflow version from the versions.yml because we test it using different nextflow versions.
                    removeNextflowVersion("$outputDir/pipeline_info/pipeline_software_mqc_versions.yml"),
                    // All stable name.
                    stable_name,
                    // All fastsurfer output.
                    fastsurfer_output
                ).match()
            }
        }
    }

    test("Freesurfer profile - without license - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking.csv"
                params.outdir = "$outputDir"

                params.freesurfer = true
                params.use_fastsurfer = true

            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("No license file path provided. Please specify the path using --fs_license parameter.")
        }
    }

    test("Freesurfer profile - wrong license path - should fail") {

        when {
            params {

                params.input = "$projectDir/tests/data/samplesheet_testtracking.csv"
                params.outdir = "$outputDir"

                params.freesurfer = true
                params.use_fastsurfer = true

                params.fs_license = "./not/a/valid/path/license.txt"

            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains("* --fs_license (./not/a/valid/path/license.txt): the file or directory './not/a/valid/path/license.txt' does not exist")
        }
    }
}
