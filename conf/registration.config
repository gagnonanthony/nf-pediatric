/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'NF_PEDIATRIC:PEDIATRIC:COREG' {
        ext.dimensionality = params.coreg_dimensionality
        ext.transform = params.coreg_transform
        ext.quick = params.coreg_quick
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                if (filename.contains("warped.nii.gz")) { "${meta.id}_space-T2w_desc-preproc_T1w.nii.gz" }
                else if (filename.contains("1GenericAffine.mat")) { "${meta.id}_from-T1w_to-T2w_affine.mat" }
                else if (filename.contains("0InverseAffine.mat")) { "${meta.id}_from-T2w_to-T1w_warp.mat"  }
                else if (filename.contains("versions.yml")) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:REGISTRATION:REGISTRATION_ANATTODWI' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                if ( filename.contains("t1_warped") ) { params.infant ? "${meta.id}_space-DWI_desc-preproc_T2w.nii.gz" : "${meta.id}_space-DWI_desc-preproc_T1w.nii.gz" }
                else if ( filename.contains("0GenericAffine.mat") ) { params.infant ? "${meta.id}_from-T2w_to-dwi_affine.mat" : "${meta.id}_from-T1w_to-dwi_affine.mat" }
                else if ( filename.contains("1Warp.nii.gz") ) { params.infant ? "${meta.id}_from-T2w_to-dwi_warp.nii.gz" : "${meta.id}_from-T1w_to-dwi_warp.nii.gz" }
                else if ( filename.contains("1InverseWarp.nii.gz") ) { params.infant ? "${meta.id}_from-dwi_to-T2w_warp.nii.gz" : "${meta.id}_from-dwi_to-T1w_warp.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:APPLYTRANSFORMS' {
        ext.dimensionality = params.reg_dimensionality
        ext.interpolation = params.reg_interpolation
        ext.output_dtype = params.reg_output_dtype
        ext.first_suffix = "t1"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                if ( filename.contains("warped") ) { "${meta.id}_space-DWI_desc-preproc_T1w.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}
